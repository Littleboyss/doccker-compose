version: '3.7'

services:
  web:
    image: nginx:alpine # Official image docker-compose automatic pull creation 官方镜像,         docker-compose自动拉取创建
    container_name: nginx
    ports: # The left port is exposed to the outside, and the right port is the port inside the container. 左边端口对外暴露,右边端口为容器内端口
      - "80:80"
    volumes: # Directory mount 目录挂载
      - /Users/leaves/Public:/data/webapp # /host_mnt/f stands for windows F:/ /host_mnt/f 代表windows F:/
      - ./data/weblogs:/weblogs/nginx
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./data/mysql/mysql_sock:/var/run/mysqld
    networks:
      - docker-network
    depends_on: # Startup order after php 在下面php容器启动后启动
      - php


  # 新框架的php配置
  php:
    image: php7.2 # The {imageName} created in the first step
    # 官方版本默认安装扩展: 
    # Core, ctype, curl
    # date, dom
    # fileinfo, filter, ftp
    # hash
    # iconv
    # json
    # libxml
    # mbstring, mysqlnd
    # openssl
    # pcre, PDO, pdo_sqlite, Phar, posix
    # readline, Reflection, session, SimpleXML, sodium, SPL, sqlite3, standard
    # tokenizer
    # xml, xmlreader, xmlwriter
    # zlib
    container_name: php
    volumes: # Directory mount 目录挂载
      - /Users/leaves/Public:/data/webapp
      - ./data/weblogs:/weblogs
      - ./php/conf.d/php.ini:/usr/local/etc/php/conf.d/php.ini
    networks:
      - docker-network


  # rabbitmq:
  #   image: rabbitmq
  #   environment:
  #     RABBITMQ_DEFAULT_USER: guest
  #     RABBITMQ_DEFAULT_PASSWORD: guest
  #     RABBITMQ_DEFAULT_VHOST: /
  #     RABBITMQ_SSL_CACERTFILE: /rootCA.pem
  #     RABBITMQ_SSL_CERTFILE: /rootCA.pem
  #     RABBITMQ_SSL_KEYFILE: /rootCA.key
  #     RABBITMQ_SSL_VERIFY: verify_none
  #     RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT: "false"
  #   volumes:
  #     - "./tests/files/rootCA.pem:/rootCA.pem:ro"
  #     - "./tests/files/rootCA.key:/rootCA.key:ro"
  #   ports:
  #     - 5671:5671
  #     - 5672:5672


  redis:
    image: redis:alpine
    container_name: redis   # php 调用的时候直接使用radis 127.0.0.1 在docker中无法通过
    ports: 
      - "6379:6379"
    restart: always
    volumes: # Directory mount 目录挂载
      - ./data:/data
      - ./redis:/etc/redis
    # command: redis-server --requirepass ${pwd} --notify-keyspace-events Eglx
    networks:
      - docker-network

  mysql:
    image: mysql:5.7
    container_name: mysql   
    ports: 
      - "3306:3306"
    restart: always
    volumes: # Directory mount 目录挂载
      - ./mysql/data:/var/lib/mysql # mysql 数据文件
      - ./mysql/config/mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro
    networks:
      - docker-network
    environment:
      MYSQL_ROOT_PASSWORD: "chengye"


  # mongo:
  #   image: mongo
  #   container_name: mongo
  #   ports:
  #     - "27017:27017"
  #   restart: always
  #   volumes:
  #     - ./mongo/data:/data/db
  #     - ./mongo/log:/var/log/mongodb/mongod.log
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: chengye
  #   networks:
  #     - docker-network


networks:
    docker-network:
        driver: bridge # Bridge mode nginx can be used to represent php services IP address in nginx configuration 桥接模式 在nginx的配置中就能使用 php 来代表php的IP地址