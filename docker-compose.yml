version: '3.3'

services:
  web:
    image: nginx:alpine # Official image docker-compose automatic pull creation 官方镜像,         docker-compose自动拉取创建
    container_name: nginx
    ports: # The left port is exposed to the outside, and the right port is the port inside the container. 左边端口对外暴露,右边端口为容器内端口
      - "80:80"
      - "443:443"
    volumes: # Directory mount 目录挂载
      - /data/webapp:/data/webapp # /host_mnt/f stands for windows F:/ /host_mnt/f 代表windows F:/
      - ./data/weblogs:/weblogs/nginx
      - ./nginx/conf.d:/etc/nginx/conf.d
    networks:
      - docker-network
    depends_on: # Startup order after php 在下面php容器启动后启动
      - php


  # 新框架的php配置
  php:
    image: php7.2 # The {imageName} created in the first step
    container_name: php
    volumes: # Directory mount 目录挂载
      - /data/webapp:/data/webapp
      - ./data/weblogs:/weblogs
      - ./php/conf.d/php.ini:/usr/local/etc/php/conf.d/php.ini
    networks:
      - docker-network

  # rabbitmq:
  #   image: rabbitmq
  #   environment:
  #     RABBITMQ_DEFAULT_USER: guest
  #     RABBITMQ_DEFAULT_PASSWORD: guest
  #     RABBITMQ_DEFAULT_VHOST: /
  #     RABBITMQ_SSL_CACERTFILE: /rootCA.pem
  #     RABBITMQ_SSL_CERTFILE: /rootCA.pem
  #     RABBITMQ_SSL_KEYFILE: /rootCA.key
  #     RABBITMQ_SSL_VERIFY: verify_none
  #     RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT: "false"
  #   volumes:
  #     - "./tests/files/rootCA.pem:/rootCA.pem:ro"
  #     - "./tests/files/rootCA.key:/rootCA.key:ro"
  #   ports:
  #     - 5671:5671
  #     - 5672:5672

  # #添加elk
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:5.5.1
  #   container_name: elasticsearch
  #   hostname: elasticsearch
  #   environment:
  #     - cluster.name=docker-cluster
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   mem_limit: 1g
  #   cap_add:
  #     - IPC_LOCK
  #   ports: 
  #     - "9200:9200"
  #   volumes: # Directory mount 目录挂载
  #     - ./data/esdata1:/usr/share/elasticsearch/data
  #   networks:
  #     - docker-network

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:5.5.1
  #   container_name: kibana551
  #   hostname: kibana
  #   environment:
  #     - ELASTICSEARCH_URL=http://elasticsearch:9200
  #   depends_on:
  #     - elasticsearch
  #   restart: always
  #   ports:
  #     - "5601:5601"
  #   networks:
  #     - docker-network

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:5.5.1
  #   container_name: logstash551
  #   hostname: logstash
  #   command: logstash -f /etc/logstash/conf.d/logstash.conf
  #   volumes:
  #     - $PWD/logstash/conf.d:/etc/logstash/conf.d
  #     - /host_mnt/f/work/storage/logs:/tmp
  #   restart: always
  #   depends_on:
  #     - elasticsearch
  #   ports:
  #     - "7001-7005:7001-7005"
  #     - "4567:4567"
  #   networks:
  #     - docker-network

  # redis:
  #   image: redis:alpine
  #   container_name: redis   # php 调用的时候直接使用radis 127.0.0.1 在docker中无法通过
  #   ports: 
  #   - "6379:6379"
  #   restart: always
  #   volumes: # Directory mount 目录挂载
  #     - ./data:/data
  #     - ./redis:/etc/redis
  #   #command: redis-server --requirepass ${pwd} --notify-keyspace-events Eglx
  #   networks:
  #     - docker-network

  mysql:
    image: mysql:5.5
    container_name: mysql   
    ports: 
     - "3306:3306"
    restart: always
    volumes: # Directory mount 目录挂载
     - ./mysql/data:/var/lib/mysql # mysql 数据文件
     - ./mysql/config/mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro
    networks:
      - docker-network
    environment:
      MYSQL_ROOT_PASSWORD: "chengye"


networks:
    docker-network:
        driver: bridge # Bridge mode nginx can be used to represent php services IP address in nginx configuration 桥接模式 在nginx的配置中就能使用 php 来代表php的IP地址
